@page "/messages"
@using Azurite.BlazorWasmApp.Services
@using Azurite.SharedModels
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav
@inject SignalRService SignalRService

<PageTitle>Messages</PageTitle>

<h3>Server Messages</h3>

<p>
    Connection status: <strong>@connectionStatus</strong>
</p>

<ul class="list-group">
    @foreach (var msg in messages)
    {
        <li class="list-group-item">@msg</li>
    }
</ul>

@code {
    private List<ChatMessage> messages = new();
    private string connectionStatus = "Disconnected";
    private string userName = "Anonymous";
    private string messageText = "";

    protected override async Task OnInitializedAsync()
    {
        SignalRService.MessagesChanged += OnMessagesChanged;
        SignalRService.ConnectionStateChanged += OnConnectionStateChanged;

        messages = SignalRService.GetMessages();
        connectionStatus = SignalRService.GetConnectionState();

        await SignalRService.StartAsync(userName);
    }

    private void OnMessagesChanged(List<ChatMessage> newMessages)
    {
        messages = newMessages;
        InvokeAsync(StateHasChanged);
    }

    private void OnConnectionStateChanged(string newStatus)
    {
        connectionStatus = newStatus;
        InvokeAsync(StateHasChanged);
    }

    private bool IsConnected => connectionStatus == "Connected";

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userName) && !string.IsNullOrWhiteSpace(messageText) && IsConnected)
        {
            await SignalRService.SendMessageAsync(userName, messageText);
            messageText = "";
        }
    }

    private async Task HandleKeyPress(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task Connect()
    {
        await SignalRService.StartAsync(userName);
    }

    private async Task Disconnect()
    {
        await SignalRService.StopAsync();
        connectionStatus = "Disconnected";
    }

    public void Dispose()
    {
        SignalRService.MessagesChanged -= OnMessagesChanged;
        SignalRService.ConnectionStateChanged -= OnConnectionStateChanged;
    }

}


